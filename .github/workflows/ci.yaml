---
name: ci
on:
  push:
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "docs/**"
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - master

jobs:
  lint:
    name: static analysis
    runs-on: ubuntu-latest
    steps:
    - name: checkout source
      uses: actions/checkout@v4
    - name: install clang formatter
      run: |
        sudo apt-get update -y
        sudo apt-get install -y python3 python3-pip
        python3 -m pip install -r requirements.txt
        echo `clang-format --version`
      env:
        DEBIAN_FRONTEND: noninteractive
    - name: run clang formatter
      run: find core -iname *.c -o -iname *.h | xargs clang-format -n -Werror --verbose
  build:
    name: build firmware
    runs-on: ubuntu-latest
    steps:
      - name: checkout source
        uses: actions/checkout@v3
      - name: install gcc-arm-none-eabi & openocd
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-arm-none-eabi openocd
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: setup cmake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.22.x'
      - name: build
        run: |
          mkdir $GITHUB_WORKSPACE/build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j`nproc`
      - name: binary size details
        working-directory: build 
        run: make size
      - name: binary object dump
        working-directory: build 
        run: make objdump
      - name: archive compile commands 
        uses: actions/upload-artifact@v3
        with:
          name: compile_commands.json
          path: build/compile_commands.json
          retention-days: 5
      - name: archive binary 
        uses: actions/upload-artifact@v3
        with:
          name: raptor
          # relative to $GITHUB_WORKSPACE 
          path: build/core/raptor.elf
          retention-days: 5
  # test:
  #   name: tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout source
  #       uses: actions/checkout@v4
  #     - name: install gcc-arm-none-eabi & openocd
  #       run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y gcc-arm-none-eabi openocd
  #       env:
  #         DEBIAN_FRONTEND: noninteractive
  #     - name: setup cmake
  #       uses: jwlawson/actions-setup-cmake@v1.14
  #       with:
  #         cmake-version: '3.22.x'
  #     - name: build integration test binaries
  #       run: |
  #         mkdir $GITHUB_WORKSPACE/build
  #         cd build
  #         cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=On
  #         make -j`nproc`
  #     - name: build unittests
  #       run: |
  #         mkdir $GITHUB_WORKSPACE/tests/unit/build
  #         cmake -B tests/unit/build -S tests/unit
  #         cmake --build tests/unit/build
  #     - name: run unittests
  #       run: ctest --test-dir tests/unit/build
  #     - name: Upload coverage reports to Codecov
  #       uses: codecov/codecov-action@v4.0.1
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         slug: dronectl/raptor
